@using BlazorJanken.Components.Enums
@using BlazorJanken.Components.Models
@inject ILogger Logger

<h3>Rock Paper Scissors</h3>
<p>Choose a shape</p>
<button class="btn btn-primary" @onclick="@(() => JankenRound(Shape.Rock))">Rock ✊</button>
<button class="btn btn-primary" @onclick="@(() => JankenRound(Shape.Paper))">Paper ✋</button>
<button class="btn btn-primary" @onclick="@(() => JankenRound(Shape.Scissors))">Scissors ✌️</button>
<hr/>
<div>Results - Round @(_roundResults.Count)</div>
@if (_roundResults.Count is 0)
{
    <div>No round was played yet</div>
}
else
{
    LatestResult = _roundResults.Last();
    UpdateJankenScore(LatestResult);
    <JankenResult RoundResult="@LatestResult"></JankenResult>
}
<hr/>
<div>Player Score: @PlayerScore</div>
<div>Computer Score: @ComputerScore</div>
<button class="btn btn-secondary" @onclick="@ResetScores">Reset Score</button>
<hr/>


@code {
    private readonly Shape[] _handShapes = { Shape.Rock, Shape.Paper, Shape.Scissors };
    private List<RoundResult> _roundResults = new();

    private int PlayerScore { get; set; }
    private int ComputerScore { get; set; }
    private RoundResult LatestResult { get; set; }

    private Task JankenRound(Shape playerChoice)
    {
        var computerChoice = ComputerChoice();
        Logger.Information("Player 1 {Choice} vs Computer {Random}", EnumName(playerChoice), EnumName(computerChoice));

        if (playerChoice == computerChoice)
        {
            Logger.Information("Round ends in {State}", nameof(GameState.Draw));
            var draw = new RoundResult(GameState.Draw, playerChoice, computerChoice);
            _roundResults.Add(draw);
            return Task.CompletedTask;
        }

        var state = (playerChoice, computer:computerChoice) switch 
        {
            (Shape.Rock, Shape.Paper) => GameState.Loss,
            (Shape.Paper, Shape.Scissors) => GameState.Loss,
            (Shape.Scissors, Shape.Rock) => GameState.Loss,
            (_, _) => GameState.Win
        };

        Logger.Information("Round ends in {State} for Player", EnumName(state));
        var result = new RoundResult(state, playerChoice, computerChoice);
        _roundResults.Add(result);
        return Task.CompletedTask;
    }

    private void UpdateJankenScore(RoundResult result)
    {
        switch (result.State)
        {
            case GameState.Win:
                PlayerScore++;
                break;
            case GameState.Loss:
                ComputerScore++;
                break;
            case GameState.Draw:
            default:
                break;
        }
    }

    private Shape ComputerChoice()
    {
        return _handShapes[Random.Shared.Next(0, 3)];
    }

    private void ResetScores()
    {
        PlayerScore = 0;
        ComputerScore = 0;
        _roundResults = new List<RoundResult>();
        Logger.Information("Reset Scores {Player}, {Computer}", PlayerScore, ComputerScore);
    }

    private static string EnumName<T>(T enumObj) where T : Enum
    {
        return Enum.GetName(typeof(T), enumObj) ?? string.Empty;
    }

}